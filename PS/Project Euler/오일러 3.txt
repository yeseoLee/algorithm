/*
어떤 수를 소수의 곱으로만 나타내는 것을 소인수분해라 하고, 이 소수들을 그 수의 소인수라고 합니다.
예를 들면 13195의 소인수는 5, 7, 13, 29 입니다.
600851475143의 소인수 중에서 가장 큰 수를 구하세요.
*/
#include<stdio.h>
long long getFactor(long long n);
int isPrime(long long n);
int main() {
	long long  num = 600851475143;
	long long  maxPF = 1; //maxPrimeFactor
	long long  factor;
	while (num != 1) {
		factor = getFactor(num);
		if (isPrime(factor) == 1 && factor > maxPF) {
			maxPF = factor;
		}
		num /= factor;
	}
	printf("%lld", maxPF);
	return 0;
}
long long getFactor(long long n) {
	long long i;
	for (i = 2; i < n; i++) {
		if (n % i == 0) return i;
	}
	return n;
}
int isPrime(long long n) {
	long long i;
	for (i = 2; i < n; i++) {
		if (n % i == 0) return 0; //notPrime
	}
	return 1; //prime
}

[모범답안]
#include<stdio.h>
void main()
{
    long long num = 600851475143;
    int prime = 0;    // 가장 큰 소인수를 담을 변수

    for (int i = 3; i <= num; i++)    // 문제가 홀수기 때문에 3부터 시작
    {
        if (num % i == 0)
        {
            prime = i;    
            num /= i;    
        }
    }
    printf("%d\n", prime);
}
/*
위의 과정을 끝내면 현재 가장큰 소인수가 prime에 들어가게된다. 
소수가 아닌 수는 소수보다 먼저 나눌 수 없기 때문에 알아서 걸러지기 때문
*/
